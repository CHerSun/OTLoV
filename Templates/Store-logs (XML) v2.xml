<?xml version="1.0" encoding="utf-8"?>
<Template ID="OTLoV" Name="Store.logs (XML) v2.0 [3]">
  <File KeepUnsectionedSource="1">
    <!-- # File detection: we want to see <LOG_DATA VERSION="2.0"> and <RESPONSE VERSION="*" REQUEST="something"/> -->
    <Detect Match="LOG_DATA VERSION=&quot;2.0&quot;"/>
    <Detect Match="RESPONSE VERSION=.* REQUEST=&quot;[\S^&quot;]"/>

    <!-- # Remove unwanted XML elements -->
    <Pre_Clean Find="^\s*&lt;/?(LOG_DATA|\?xml).*"/>

    <!-- # Split full file into: XML, Plain text, WBI parts -->
    <!-- Ignoring WBI part, as it looks like repeating XML section -->
    <SplitAt Match="&lt;(CONFIG_XML|LOG_CONTENT|wbi)&gt;"/>
    <SplitAt Match="&lt;/(CONFIG_XML|LOG_CONTENT|wbi)&gt;" Offset="1"/>


    <!-- @ XML section parsing -->
    <Section Match="CONFIG_XML" Hide="1" KeepUnsectionedSource="1">
      <Pre_Clean Find="^.*&lt;/?CONFIG_XML&gt;.*$"/>
      <SplitAt Match="^\s*&lt;RESPONSE "/>

      <!-- # Unfold single-line PROPERTY XML element as "Name"="Property" + other attributes -->
      <Pre_Clean Find="^\s*&lt;PROPERTY name=&quot;([^&quot;]*?)&quot;(.*?)&gt;([^&lt;]*?)&lt;/PROPERTY&gt;" 
                 Replacement="$1=&quot;$3&quot;$2" AsSingleLine="1" RO="19"/>
      <!-- # Try to merge multiline PROPERTY XML elements into single line -->
      <Pre_Clean Find="^(?&lt;key&gt;[^\s=]+)=&quot;(?&lt;l1&gt;[^&quot;\n]+)\n\s*(?&lt;l2&gt;\S.*?)&quot;"
                 Replacement="${key}=&quot;${l1} ${l2}&quot;" AsSingleLine="1"/>
      <Pre_Clean Find="^(?&lt;key&gt;[^\s=]+)=&quot;(?&lt;l1&gt;[^&quot;\n]+)\n\s*(?&lt;l2&gt;\S.*?)&quot;"
                 Replacement="${key}=&quot;${l1} ${l2}&quot;" AsSingleLine="1"/>
      <!-- # Remove type="type_string" and key="..." attributes -->
      <Pre_Clean Find="\s+(type|key)=&quot;[^&quot;]*&quot;"/>
      <!-- # Remove units="..." attribute, merging the units into previous value (avoids duplicates) -->
      <Pre_Clean Find="(\S+)&quot;\s+units=&quot;(?=\1&quot;)|&quot; units=&quot;" 
                  Replacement=" "/>
      <!-- # Remove name="..." attribute, if its value duplicates basetype="..." value -->
      <Pre_Clean Find="(?&lt;=basetype=&quot;)([^&quot;]+)&quot;\s+name=&quot;(?=\1&quot;)" 
                  Replacement=""/>

      <TreeLink Composite="Configuration (XML)"/>

      <!-- Generic XML part higlights: missing entries, headers, successfull completion of command -->
      <Highlight Priority="50"  Background="#C9C8CF"   Match="^No\b.*\bentries were found.*"/>
      <Highlight Priority="0"   Foreground="#C9C8CF"   Match="^# \w.*"/>
      <Highlight Priority="0"   Foreground="#C9C8CF"   Match="^basetype=.*oid=" Pattern="^.*$"/>
      <Highlight Priority="0"   Foreground="#90D58D"   Match="^Command completed successfully. \(.*"/>

      <!-- Decided to use more specific highlights for all states to better control what's ok and what needs attention -->
      <!-- This uses more CPU time and more lines, but this could be very-very specific with status highlights -->
      <!-- STATUS highlights. -->
      <Highlight Priority="100" Background="#90D58D"   Match="compact-flash-status" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Installed(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"   Match="compact-flash-status" Exclude="-numeric|(?&lt;=&quot;|^)Installed(?=$|&quot;)" Pattern="^.*$" Comment="Status is not defined in template"/>

      <Highlight Priority="100" Background="#90D58D"   Match="controller-.-status" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Operational(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"   Match="controller-.-status" Exclude="-numeric|(?&lt;=&quot;|^)Operational(?=$|&quot;)" Pattern="^.*$" Comment="Status is not defined in template"/>

      <Highlight Priority="100" Background="#90D58D"   Match="^other-mc-status" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Operational(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"   Match="^other-mc-status" Exclude="-numeric|(?&lt;=&quot;|^)Operational(?=$|&quot;)" Pattern="^.*$" Comment="Status is not defined in template"/>

      <Highlight Priority="50"  Background="#C9C8CF"   Match="^(elem-status|fru-status|sfp-status|sfp-present|temperature-status|status-ses)" Exclude="-numeric"             Pattern="(?&lt;=&quot;|^)(Not Used|Not Present)(?=$|&quot;)"/>
      <Highlight Priority="100" Background="#90D58D"   Match="^(elem-status|fru-status|sfp-status|sfp-present|temperature-status|status-ses)" Exclude="-numeric|not present" Pattern="(?&lt;=&quot;|^)(OK|Present)(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"   Match="^(elem-status|fru-status|sfp-status|sfp-present|temperature-status|status-ses)" Exclude="-numeric|(?&lt;=&quot;|^)(Not Used|Not present|Present|OK)(?=$|&quot;)" Pattern="^.*$" Comment="Status is not defined in template"/>

      <Highlight Priority="50"  Background="#C9C8CF"    Match="^health(?=$|=)" Exclude="-numeric"    Pattern="(?&lt;=&quot;|^)N/A(?=$|&quot;)"/>
      <Highlight Priority="100" Background="#90D58D"    Match="^health(?=$|=)" Exclude="-numeric"    Pattern="(?&lt;=&quot;|^)OK(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"    Match="^health(?=$|=)" Exclude="-numeric"    Pattern="(?&lt;=&quot;|^)degraded(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"    Match="^health(?=$|=)" Exclude="-numeric|(?&lt;=&quot;|^)(N/A|OK|degraded)(?=$|&quot;)" Pattern="^.*$" Comment="Status is not defined in template"/>

      <Highlight Priority="0"   Background="#F2D463"   Match="^health-reason=" Exclude="-numeric|=&quot;\s*&quot;" Pattern="(?&lt;==&quot;)[^&quot;]*(?=&quot;)" Comment="Reason is not empty and not one of known minor states. Please review."/>
      <Highlight Priority="0"   Background="#F2D463"   Match="^health-reason$" Exclude="-numeric|^$"               Pattern="^.*$"                                Comment="Reason is not empty and not one of known minor states. Please review."/>
      <Highlight Priority="0"   Background="#C9C8CF"   Match="^health-recommendation=" Exclude="-numeric|=&quot;\s*&quot;|No Action Required" Pattern="(?&lt;==&quot;)[^&quot;]*(?=&quot;)" Comment="Recommended action is not empty and not one of known minor states. Please review."/>
      <Highlight Priority="0"   Background="#C9C8CF"   Match="^health-recommendation$" Exclude="-numeric|^$"                                  Pattern="^.*$"                                Comment="Recommended action is not empty and not one of known minor states. Please review."/>
      <Highlight Priority="150" Background="#F2D463"   Match="^fail-over-reason=" Exclude="-numeric|=&quot;\s*&quot;|Not applicable" Pattern="(?&lt;==&quot;)[^&quot;]*(?=&quot;)" Comment="Reason is not empty and not one of known minor states. Please review."/>
      <Highlight Priority="150" Background="#F2D463"   Match="^fail-over-reason$" Exclude="-numeric|^$|Not applicable"               Pattern="^.*$"                                Comment="Reason is not empty and not one of known minor states. Please review."/>


      <Highlight Priority="50"  Background="#C9C8CF"   Match="^fde-security-status" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Unsecured(?=$|&quot;)"/>
      <Highlight Priority="50"  Background="#C9C8CF"   Match="^ntp-status" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)deactivated(?=$|&quot;)"/>
      <Highlight Priority="50"  Background="#C9C8CF"   Match="^ntp-state"  Exclude="-numeric" Pattern="(?&lt;=&quot;|^)disabled(?=$|&quot;)"/>

      <Highlight Priority="100" Background="#90D58D"   Match="^redundancy-status" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Redundant(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"   Match="^redundancy-status" Exclude="-numeric|(?&lt;=&quot;|^)Redundant(?=$|&quot;)" Pattern="^.*$" Comment="Status is not defined in template"/>

      <Highlight Priority="100" Background="#90D58D"   Match="^write-back-status" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Enabled(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"   Match="^write-back-status" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Disabled(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"   Match="^write-back-status" Exclude="-numeric|(?&lt;=&quot;|^)(Enabled|Disabled)(?=$|&quot;)" Pattern="^.*$" Comment="Status is not defined in template"/>

      <Highlight Priority="100" Background="#90D58D"   Match="^compact-flash-health" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)OK(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"   Match="^compact-flash-health" Exclude="-numeric|(?&lt;=&quot;|^)OK(?=$|&quot;)" Pattern="^.*$" Comment="Status is not defined in template"/>

      <Highlight Priority="100" Background="#90D58D"   Match="^led-status" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)\s*Online(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"   Match="^led-status" Exclude="-numeric|(?&lt;=&quot;|^)\s*Online(?=$|&quot;)" Pattern="^.*$" Comment="Status is not defined in template"/>

      <Highlight Priority="50"  Background="#C9C8CF"   Match="^discovered" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)No(?=$|&quot;)"/>
      <Highlight Priority="100" Background="#90D58D"   Match="^discovered" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Yes(?=$|&quot;)"/>

      <Highlight Priority="50"  Background="#C9C8CF"    Match="^status($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)(Disconnected|Default)(?=$|&quot;)"/>
      <Highlight Priority="50"  Background="#C9C8CF"    Match="^status($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Enabled - Degraded(?=$|&quot;)" Comment="Could be normal for egress ports"/>
      <Highlight Priority="100" Background="#90D58D"    Match="^status($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Enabled - Healthy(?=$|&quot;)"/>
      <Highlight Priority="100" Background="#90D58D"    Match="^status($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)FTOL(?=$|&quot;)"/>
      <Highlight Priority="100" Background="#90D58D"    Match="^status($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)(OK|Up|Installed|Operational|Active)(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"    Match="^status($|=)" Exclude="-numeric|(?&lt;=&quot;|^)(Disconnected|Enabled - Degraded|Enabled - Healthy|FTOL|OK|Up|Installed|Operational|Active|Default)(?=$|&quot;)" Pattern="^.*$" Comment="Status is not defined in template"/>

      <Highlight Priority="100" Background="#90D58D"    Match="^resolved($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Yes(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"    Match="^resolved($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)No(?=$|&quot;)"/>

      <Highlight Priority="100" Background="#90D58D"    Match="^remanufacture($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)Enabled(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"    Match="^remanufacture($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)(Disabled|Yes)(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"    Match="^remanufacture($|=)" Exclude="-numeric|(?&lt;=&quot;|^)(Enabled|Disabled|Yes|No)(?=$|&quot;)" Pattern="^.*$" Comment="Status is not defined in template"/>

      <Highlight Priority="50"  Background="#C9C8CF"    Match="^severity($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)INFORMATIONAL(?=$|&quot;)"/>
      <Highlight Priority="100" Background="#90D58D"    Match="^severity($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)RESOLVED(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"    Match="^severity($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)WARNING(?=$|&quot;)"/>
      <Highlight Priority="200" Background="LightCoral" Match="^severity($|=)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)CRITICAL(?=$|&quot;)"/>
      <Highlight Priority="150" Background="#F2D463"    Match="^severity($|=)" Exclude="-numeric|(?&lt;=&quot;|^)(INFORMATIONAL|RESOLVED|WARNING|CRITICAL)(?=$|&quot;)" Pattern="^.*$" Comment="Severity is not defined in template"/>

      <!-- DESCRIPTIVES highlights. -->
      <Highlight Priority="0"   Background="LightBlue"  Match="^(state|usage)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)\w+ SP(?=$|&quot;)"/>
      <Highlight Priority="0"   Background="Wheat"      Match="^(state|usage)" Exclude="-numeric" Pattern="(?&lt;=&quot;|^)VIRTUAL POOL(?=$|&quot;)"/>

      <!-- $ TEMP entries to copy colors/priorities -->
      <!--
      <Highlight Priority="200" Background="#F08080"   Match="state"           Pattern="^UNKN$" Comment="Disk state is unknown."/>
      <Highlight Priority="150" Background="#F2D463"   Match="(status|health)" Pattern="^Enabled-Degraded$" Comment="Could be Normal for Egress ports of last enclosure on a chain."/>
      <Highlight Priority="100" Background="#90D58D"   Match="(status|health)" Pattern="^(Up|OK|Redundant|Enabled-Healthy|FTOL|Operational|Online|Installed)$"/>
      <Highlight Priority="100" Background="#90D58D"   Match="discovered"      Pattern="^Yes$"/>
      <Highlight Priority="50"  Background="#C9C8CF"   Match="(status|health)" Pattern="^Disconnected$"/>
      --> 

      <!-- Extract values, common to XML part -->
      <!-- # Extract one of section naming values -->
      <ValueSeparator Key="SECT_NAME_1" Hide="1" Match="^# " Separator="^# "/>
      <ValueSeparator Key="SECT_NAME_2" Hide="1"
                      Match="basetype"
                      Pattern="[^\s=]+=&quot;.*?&quot;"
                      Key_Match="name"
                      Value_Find="&quot;"/>
      <ValueSeparator Key="SECT_NAME_3" Hide="1"
                      Match="durable-id|^name="
                      Pattern="[^\s=]+=&quot;.*?&quot;"
                      Value_Find="&quot;"/>
      <!-- # extract most of the values in all sections. 
              If it's too generic - will need to split this and move into individual sections.
              Currently extracting all key-value pairs we can find, but those with keys matching Key_Exclude
      -->
      <ValueSeparator Exclude="basetype|name=.additional-information"
                      Pattern="[^\s=]+=&quot;.*?&quot;"
                      Key_Exclude="^(type|oid|format|key|url|extended-status|reason-id)$|-numeric|supported-locales|-reason|-recommendation|-crc|cfg-|-format-version|lock-key|-url|fc-p\d|dsd"
                      Value_Exclude="^(N/A|::|Not secured)$"
                      Key_Find="(?&lt;=controller|enclosure)-id"
                      Value_Find="&quot;"/>
      <ValueSeparator Match="basetype"
                      Pattern="[^\s=]+=&quot;.*?&quot;"
                      Key_Exclude="^(type|oid|format|key|name)$"
                      Value_Find="&quot;"/>


      <!-- @ Log header hidden XML section -->
      <Section Match="VERSION=&quot;[^&quot;]*&quot;&gt;" Rename="Log header" Hide="1" InheritValues="0">
        <!-- # Unfold top-level RESPONSE element - this is the top-level section -->
        <Pre_Clean Find="^\s*&lt;RESPONSE (\S+.*)&gt;" Replacement="~~ $1"/>
        <Pre_Clean Find="^\s*&lt;/RESPONSE&gt;"        Replacement=""/>
        <!-- # Find same-level <OBJECT.. and </OBJECT> element start/end and unfold it marking start and end -->
        <Pre_Clean Find="^(?&lt;spaces&gt;\s*)&lt;OBJECT (?&lt;attributes&gt;[^&gt;]*)&gt;(?&lt;content&gt;[\s\S]*?)^\k&lt;spaces&gt;&lt;/OBJECT&gt;" 
                   Replacement="~ ${attributes}${content}&#xA;~end~" 
                   AsSingleLine="1" RO="3"/>

        <Pre_Clean Find="^[\s\S]*?(?=^log-)" AsSingleLine="1" RO="3"/>
        <Pre_Clean Find="^~end~"/>
      </Section>
      <!-- @ show configuration XML section -->
      <Section Match="show configuration" KeepUnsectionedSource="1" Rename="{SECT_NAME_1}">
        <!-- # Unfold top-level RESPONSE element - this is the top-level section -->
        <Pre_Clean Find="^\s*&lt;RESPONSE (\S+.*)&gt;" Replacement="~~ $1"/>
        <Pre_Clean Find="^\s*&lt;/RESPONSE&gt;"        Replacement=""/>
        <Pre_Clean Find="^~~ .*REQUEST=&quot;(?&lt;name&gt;[^&quot;]*)&quot;.*" Replacement="# ${name}"/>
        <!-- # Replace <OBJECT basetype="STATUS"...</OBJECT> with just the message contained in RESPONSE -->
        <Pre_Clean Find="^(?&lt;spaces&gt;\s*)&lt;OBJECT basetype=&quot;status&quot;[\s\S]*?response=&quot;(?&lt;status&gt;[^&quot;]*)&quot;[\s\S]*?^\k&lt;spaces&gt;&lt;/OBJECT&gt;" 
                   Replacement="&#xA;${status}" 
                   AsSingleLine="1" RO="3"/>
        <!-- # Find same-level <OBJECT.. and </OBJECT> element start/end and unfold it marking start and end -->
        <Pre_Clean Find="^(?&lt;spaces&gt;\s*)&lt;OBJECT (?&lt;attributes&gt;[^&gt;]*)&gt;(?&lt;content&gt;[\s\S]*?)^\k&lt;spaces&gt;&lt;/OBJECT&gt;" 
                   Replacement="~ ${attributes}${content}&#xA;~end~" 
                   AsSingleLine="1" RO="3"/>

        <SplitAt Match="^~ "/>
        <SplitAt Match="~end~" Offset="1"/>

        <TreeLink />

        <Section Match="^~ " Rename="{basetype}[ - {SECT_NAME_2}][ - {SECT_NAME_3}]" Recursive="1" KeepUnsectionedSource="1">
          <!-- Values order -->
          <ValueSeparator Exclude="^" Key="basetype"/>
          <ValueSeparator Exclude="^" Key="durable-id"/>
          <ValueSeparator Exclude="^" Key="name"/>
          <ValueSeparator Exclude="^" Key="health"/>
          <ValueSeparator Exclude="^" Key="state"/>
          <!-- # Remove current level headers -->
          <Pre_Clean Find="^~ "/>
          <Pre_Clean Find="^~end~"/>
          <!-- # Find same-level <OBJECT.. and </OBJECT> element start/end and unfold it marking start and end -->
          <Pre_Clean Find="^(?&lt;spaces&gt;\s*)&lt;OBJECT (?&lt;attributes&gt;[^&gt;]*)&gt;(?&lt;content&gt;[\s\S]*?)^\k&lt;spaces&gt;&lt;/OBJECT&gt;" 
                    Replacement="~ ${attributes}${content}&#xA;~end~" 
                    AsSingleLine="1" RO="3"/>

          <SplitAt Match="^~ "/>
          <SplitAt Match="~end~" Offset="1"/>

          <TreeLink Composite="{basetype}"/>
        </Section>
      </Section>
      <Section Match="show enclosure" KeepUnsectionedSource="1" Rename="{SECT_NAME_1}">
        <!-- # Unfold top-level RESPONSE element - this is the top-level section -->
        <Pre_Clean Find="^\s*&lt;RESPONSE (\S+.*)&gt;" Replacement="~~ $1"/>
        <Pre_Clean Find="^\s*&lt;/RESPONSE&gt;"        Replacement=""/>
        <Pre_Clean Find="^~~ .*REQUEST=&quot;(?&lt;name&gt;[^&quot;]*)&quot;.*" Replacement="# ${name}"/>
        <!-- # Replace <OBJECT basetype="STATUS"...</OBJECT> with just the message contained in RESPONSE -->
        <Pre_Clean Find="^(?&lt;spaces&gt;\s*)&lt;OBJECT basetype=&quot;status&quot;[\s\S]*?response=&quot;(?&lt;status&gt;[^&quot;]*)&quot;[\s\S]*?^\k&lt;spaces&gt;&lt;/OBJECT&gt;" 
                   Replacement="&#xA;${status}" 
                   AsSingleLine="1" RO="3"/>
        <!-- # Find same-level <OBJECT.. and </OBJECT> element start/end and unfold it marking start and end -->
        <Pre_Clean Find="^(?&lt;spaces&gt;\s*)&lt;OBJECT (?&lt;attributes&gt;[^&gt;]*)&gt;(?&lt;content&gt;[\s\S]*?)^\k&lt;spaces&gt;&lt;/OBJECT&gt;" 
                   Replacement="~ ${attributes}${content}&#xA;~end~" 
                   AsSingleLine="1" RO="3"/>

        
        <SplitAt Match="^~ "/>
        <SplitAt Match="~end~" Offset="1"/>

        <TreeLink />

        <Section Match="^~ " Rename="{basetype}[ - {SECT_NAME_2}][ - {SECT_NAME_3}]" Recursive="1" KeepUnsectionedSource="1">
          <!-- Values order -->
          <ValueSeparator Exclude="^" Key="basetype"/>
          <ValueSeparator Exclude="^" Key="durable-id"/>
          <ValueSeparator Exclude="^" Key="name"/>
          <ValueSeparator Exclude="^" Key="health"/>
          <ValueSeparator Exclude="^" Key="state"/>

          <TreeLink Composite="{basetype}"/>
          <!-- # Remove current level headers -->
          <Pre_Clean Find="^~ "/>
          <Pre_Clean Find="^~end~"/>
          <!-- # Find same-level <OBJECT.. and </OBJECT> element start/end and unfold it marking start and end -->
          <Pre_Clean Find="^(?&lt;spaces&gt;\s*)&lt;OBJECT (?&lt;attributes&gt;[^&gt;]*)&gt;(?&lt;content&gt;[\s\S]*?)^\k&lt;spaces&gt;&lt;/OBJECT&gt;" 
                    Replacement="~ ${attributes}${content}&#xA;~end~" 
                    AsSingleLine="1" RO="3"/>

          <SplitAt Match="^~ "/>
          <SplitAt Match="~end~" Offset="1"/>
        </Section>
      </Section>
      <!-- @ all other XML sections -->
      <Section Match="REQUEST=&quot;[^&quot;]+&quot;" Exclude="show configuration|show enclosure" KeepUnsectionedSource="1" Rename="{SECT_NAME_1}">
        <!-- # Unfold top-level RESPONSE element - this is the top-level section -->
        <Pre_Clean Find="^\s*&lt;RESPONSE (\S+.*)&gt;" Replacement="~~ $1"/>
        <Pre_Clean Find="^\s*&lt;/RESPONSE&gt;"        Replacement=""/>
        <Pre_Clean Find="^~~ .*REQUEST=&quot;(?&lt;name&gt;[^&quot;]*)&quot;.*" Replacement="# ${name}"/>
        <!-- # Replace <OBJECT basetype="STATUS"...</OBJECT> with just the message contained in RESPONSE -->
        <Pre_Clean Find="^(?&lt;spaces&gt;\s*)&lt;OBJECT basetype=&quot;status&quot;[\s\S]*?response=&quot;(?&lt;status&gt;[^&quot;]*)&quot;[\s\S]*?^\k&lt;spaces&gt;&lt;/OBJECT&gt;" 
                   Replacement="&#xA;${status}" 
                   AsSingleLine="1" RO="3"/>
        <!-- # Find same-level <OBJECT.. and </OBJECT> element start/end and unfold it marking start and end -->
        <Pre_Clean Find="^(?&lt;spaces&gt;\s*)&lt;OBJECT (?&lt;attributes&gt;[^&gt;]*)&gt;(?&lt;content&gt;[\s\S]*?)^\k&lt;spaces&gt;&lt;/OBJECT&gt;" 
                   Replacement="~ ${attributes}${content}&#xA;~end~" 
                   AsSingleLine="1" RO="3"/>

        
        <SplitAt Match="^~ "/>
        <SplitAt Match="~end~" Offset="1"/>

        <TreeLink />

        <Section Match="^~ " Rename="{basetype}[ - {SECT_NAME_2}][ - {SECT_NAME_3}]" Recursive="1" KeepUnsectionedSource="1">
          <!-- Values order -->
          <ValueSeparator Exclude="^" Key="basetype"/>
          <ValueSeparator Exclude="^" Key="durable-id"/>
          <ValueSeparator Exclude="^" Key="index"/>
          <ValueSeparator Exclude="^" Key="name"/>
          <ValueSeparator Exclude="^" Key="resolved"/>
          <ValueSeparator Exclude="^" Key="severity"/>
          <ValueSeparator Exclude="^" Key="health"/>
          <ValueSeparator Exclude="^" Key="state"/>
          <ValueSeparator Exclude="^" Key="status"/>
          <ValueSeparator Exclude="^" Key="disk-group"/>
          <ValueSeparator Exclude="^" Key="storage-tier"/>
          <ValueSeparator Exclude="^" Key="model"/>
          <ValueSeparator Exclude="^" Key="size"/>
          <ValueSeparator Exclude="^" Key="rpm"/>
          <ValueSeparator Exclude="^" Key="sector-format"/>
          <ValueSeparator Exclude="^" Key="serial-number"/>
          <ValueSeparator Exclude="^" Key="target-spare-capacity"/>
          <ValueSeparator Exclude="^" Key="actual-spare-capacity"/>
          <!-- # Remove current level headers -->
          <Pre_Clean Find="^~ "/>
          <Pre_Clean Find="^~end~"/>
          <!-- # Find same-level <OBJECT.. and </OBJECT> element start/end and unfold it marking start and end -->
          <Pre_Clean Find="^(?&lt;spaces&gt;\s*)&lt;OBJECT (?&lt;attributes&gt;[^&gt;]*)&gt;(?&lt;content&gt;[\s\S]*?)^\k&lt;spaces&gt;&lt;/OBJECT&gt;" 
                    Replacement="~ ${attributes}${content}&#xA;~end~" 
                    AsSingleLine="1" RO="3"/>

          <SplitAt Match="^~ "/>
          <SplitAt Match="~end~" Offset="1"/>
        </Section>
      </Section>
    </Section>


    <!-- @ PLAIN TEXT section parsing -->
    <Section Match="LOG_CONTENT" Rename="Plain text part" KeepUnsectionedSource="1">
      <Pre_Clean Find="^.*&lt;/?LOG_CONTENT&gt;.*$"/>
      <!-- Generic PLAIN TEXT part higlights: missing entries, headers, successfull completion of command -->
      <Highlight Priority="50"  Background="#C9C8CF"   Match="^No\b.*\bentries were found.*"/>
      <Highlight Priority="0"   Foreground="#C9C8CF"   Match="^# \w.*"/>
      <Highlight Priority="0"   Foreground="#90D58D"   Match="^Success: Command completed successfully. \(.*"/>
      <SplitAt Match="^##\*\*"/>
      <SplitAt Match="^##\*\*" Offset="1"/>
      <Section Match="Configuration Section" KeepUnsectionedSource="1">
        <TreeLink Composite="Configuration (text)"/>
        <SplitAt Match="^# (show|set)"/>
        <Section Match="# show">
          <TreeLink/>
        </Section>
      </Section>
      <Section Match="event log" KeepUnsectionedSource="1">
        <ValueSeparator Key="SECT_NAME_EL" Separator="^" Match="^" Hide="1"/>
        <TreeLink Composite=".Event logs\\{SECT_NAME_EL}"/>
      </Section>
      <Section Match="\w" Exclude="^##\*\*|Configuration Section|event log" KeepUnsectionedSource="1">
        <ValueSeparator Key="SECT_NAME_DL" Separator="^" Match="^" Hide="1"/>
        <TreeLink Composite=".Debug\\{SECT_NAME_DL}"/>
      </Section>
    </Section>


  </File>
</Template>